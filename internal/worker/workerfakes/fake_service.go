// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"context"
	__ "job-worker/api/gen"
	"job-worker/internal/worker"
	"sync"
)

type FakeService struct {
	StartJobStub        func(context.Context, *__.Job) (*__.Job, error)
	startJobMutex       sync.RWMutex
	startJobArgsForCall []struct {
		arg1 context.Context
		arg2 *__.Job
	}
	startJobReturns struct {
		result1 *__.Job
		result2 error
	}
	startJobReturnsOnCall map[int]struct {
		result1 *__.Job
		result2 error
	}
	StopJobStub        func(string) error
	stopJobMutex       sync.RWMutex
	stopJobArgsForCall []struct {
		arg1 string
	}
	stopJobReturns struct {
		result1 error
	}
	stopJobReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) StartJob(arg1 context.Context, arg2 *__.Job) (*__.Job, error) {
	fake.startJobMutex.Lock()
	ret, specificReturn := fake.startJobReturnsOnCall[len(fake.startJobArgsForCall)]
	fake.startJobArgsForCall = append(fake.startJobArgsForCall, struct {
		arg1 context.Context
		arg2 *__.Job
	}{arg1, arg2})
	stub := fake.StartJobStub
	fakeReturns := fake.startJobReturns
	fake.recordInvocation("StartJob", []interface{}{arg1, arg2})
	fake.startJobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) StartJobCallCount() int {
	fake.startJobMutex.RLock()
	defer fake.startJobMutex.RUnlock()
	return len(fake.startJobArgsForCall)
}

func (fake *FakeService) StartJobCalls(stub func(context.Context, *__.Job) (*__.Job, error)) {
	fake.startJobMutex.Lock()
	defer fake.startJobMutex.Unlock()
	fake.StartJobStub = stub
}

func (fake *FakeService) StartJobArgsForCall(i int) (context.Context, *__.Job) {
	fake.startJobMutex.RLock()
	defer fake.startJobMutex.RUnlock()
	argsForCall := fake.startJobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) StartJobReturns(result1 *__.Job, result2 error) {
	fake.startJobMutex.Lock()
	defer fake.startJobMutex.Unlock()
	fake.StartJobStub = nil
	fake.startJobReturns = struct {
		result1 *__.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeService) StartJobReturnsOnCall(i int, result1 *__.Job, result2 error) {
	fake.startJobMutex.Lock()
	defer fake.startJobMutex.Unlock()
	fake.StartJobStub = nil
	if fake.startJobReturnsOnCall == nil {
		fake.startJobReturnsOnCall = make(map[int]struct {
			result1 *__.Job
			result2 error
		})
	}
	fake.startJobReturnsOnCall[i] = struct {
		result1 *__.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeService) StopJob(arg1 string) error {
	fake.stopJobMutex.Lock()
	ret, specificReturn := fake.stopJobReturnsOnCall[len(fake.stopJobArgsForCall)]
	fake.stopJobArgsForCall = append(fake.stopJobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.StopJobStub
	fakeReturns := fake.stopJobReturns
	fake.recordInvocation("StopJob", []interface{}{arg1})
	fake.stopJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) StopJobCallCount() int {
	fake.stopJobMutex.RLock()
	defer fake.stopJobMutex.RUnlock()
	return len(fake.stopJobArgsForCall)
}

func (fake *FakeService) StopJobCalls(stub func(string) error) {
	fake.stopJobMutex.Lock()
	defer fake.stopJobMutex.Unlock()
	fake.StopJobStub = stub
}

func (fake *FakeService) StopJobArgsForCall(i int) string {
	fake.stopJobMutex.RLock()
	defer fake.stopJobMutex.RUnlock()
	argsForCall := fake.stopJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeService) StopJobReturns(result1 error) {
	fake.stopJobMutex.Lock()
	defer fake.stopJobMutex.Unlock()
	fake.StopJobStub = nil
	fake.stopJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) StopJobReturnsOnCall(i int, result1 error) {
	fake.stopJobMutex.Lock()
	defer fake.stopJobMutex.Unlock()
	fake.StopJobStub = nil
	if fake.stopJobReturnsOnCall == nil {
		fake.stopJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startJobMutex.RLock()
	defer fake.startJobMutex.RUnlock()
	fake.stopJobMutex.RLock()
	defer fake.stopJobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.Service = new(FakeService)
