// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"context"
	"sync"
	"worker/internal/worker/core/interfaces"
)

type FakeFilesystemManager struct {
	CleanupIsolatedFilesystemStub        func(string) error
	cleanupIsolatedFilesystemMutex       sync.RWMutex
	cleanupIsolatedFilesystemArgsForCall []struct {
		arg1 string
	}
	cleanupIsolatedFilesystemReturns struct {
		result1 error
	}
	cleanupIsolatedFilesystemReturnsOnCall map[int]struct {
		result1 error
	}
	GetIsolatedRootStub        func(string) string
	getIsolatedRootMutex       sync.RWMutex
	getIsolatedRootArgsForCall []struct {
		arg1 string
	}
	getIsolatedRootReturns struct {
		result1 string
	}
	getIsolatedRootReturnsOnCall map[int]struct {
		result1 string
	}
	SetupIsolatedFilesystemStub        func(context.Context, string) (string, error)
	setupIsolatedFilesystemMutex       sync.RWMutex
	setupIsolatedFilesystemArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	setupIsolatedFilesystemReturns struct {
		result1 string
		result2 error
	}
	setupIsolatedFilesystemReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystem(arg1 string) error {
	fake.cleanupIsolatedFilesystemMutex.Lock()
	ret, specificReturn := fake.cleanupIsolatedFilesystemReturnsOnCall[len(fake.cleanupIsolatedFilesystemArgsForCall)]
	fake.cleanupIsolatedFilesystemArgsForCall = append(fake.cleanupIsolatedFilesystemArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CleanupIsolatedFilesystemStub
	fakeReturns := fake.cleanupIsolatedFilesystemReturns
	fake.recordInvocation("CleanupIsolatedFilesystem", []interface{}{arg1})
	fake.cleanupIsolatedFilesystemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystemCallCount() int {
	fake.cleanupIsolatedFilesystemMutex.RLock()
	defer fake.cleanupIsolatedFilesystemMutex.RUnlock()
	return len(fake.cleanupIsolatedFilesystemArgsForCall)
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystemCalls(stub func(string) error) {
	fake.cleanupIsolatedFilesystemMutex.Lock()
	defer fake.cleanupIsolatedFilesystemMutex.Unlock()
	fake.CleanupIsolatedFilesystemStub = stub
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystemArgsForCall(i int) string {
	fake.cleanupIsolatedFilesystemMutex.RLock()
	defer fake.cleanupIsolatedFilesystemMutex.RUnlock()
	argsForCall := fake.cleanupIsolatedFilesystemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystemReturns(result1 error) {
	fake.cleanupIsolatedFilesystemMutex.Lock()
	defer fake.cleanupIsolatedFilesystemMutex.Unlock()
	fake.CleanupIsolatedFilesystemStub = nil
	fake.cleanupIsolatedFilesystemReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFilesystemManager) CleanupIsolatedFilesystemReturnsOnCall(i int, result1 error) {
	fake.cleanupIsolatedFilesystemMutex.Lock()
	defer fake.cleanupIsolatedFilesystemMutex.Unlock()
	fake.CleanupIsolatedFilesystemStub = nil
	if fake.cleanupIsolatedFilesystemReturnsOnCall == nil {
		fake.cleanupIsolatedFilesystemReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupIsolatedFilesystemReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFilesystemManager) GetIsolatedRoot(arg1 string) string {
	fake.getIsolatedRootMutex.Lock()
	ret, specificReturn := fake.getIsolatedRootReturnsOnCall[len(fake.getIsolatedRootArgsForCall)]
	fake.getIsolatedRootArgsForCall = append(fake.getIsolatedRootArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetIsolatedRootStub
	fakeReturns := fake.getIsolatedRootReturns
	fake.recordInvocation("GetIsolatedRoot", []interface{}{arg1})
	fake.getIsolatedRootMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFilesystemManager) GetIsolatedRootCallCount() int {
	fake.getIsolatedRootMutex.RLock()
	defer fake.getIsolatedRootMutex.RUnlock()
	return len(fake.getIsolatedRootArgsForCall)
}

func (fake *FakeFilesystemManager) GetIsolatedRootCalls(stub func(string) string) {
	fake.getIsolatedRootMutex.Lock()
	defer fake.getIsolatedRootMutex.Unlock()
	fake.GetIsolatedRootStub = stub
}

func (fake *FakeFilesystemManager) GetIsolatedRootArgsForCall(i int) string {
	fake.getIsolatedRootMutex.RLock()
	defer fake.getIsolatedRootMutex.RUnlock()
	argsForCall := fake.getIsolatedRootArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFilesystemManager) GetIsolatedRootReturns(result1 string) {
	fake.getIsolatedRootMutex.Lock()
	defer fake.getIsolatedRootMutex.Unlock()
	fake.GetIsolatedRootStub = nil
	fake.getIsolatedRootReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilesystemManager) GetIsolatedRootReturnsOnCall(i int, result1 string) {
	fake.getIsolatedRootMutex.Lock()
	defer fake.getIsolatedRootMutex.Unlock()
	fake.GetIsolatedRootStub = nil
	if fake.getIsolatedRootReturnsOnCall == nil {
		fake.getIsolatedRootReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getIsolatedRootReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystem(arg1 context.Context, arg2 string) (string, error) {
	fake.setupIsolatedFilesystemMutex.Lock()
	ret, specificReturn := fake.setupIsolatedFilesystemReturnsOnCall[len(fake.setupIsolatedFilesystemArgsForCall)]
	fake.setupIsolatedFilesystemArgsForCall = append(fake.setupIsolatedFilesystemArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SetupIsolatedFilesystemStub
	fakeReturns := fake.setupIsolatedFilesystemReturns
	fake.recordInvocation("SetupIsolatedFilesystem", []interface{}{arg1, arg2})
	fake.setupIsolatedFilesystemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystemCallCount() int {
	fake.setupIsolatedFilesystemMutex.RLock()
	defer fake.setupIsolatedFilesystemMutex.RUnlock()
	return len(fake.setupIsolatedFilesystemArgsForCall)
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystemCalls(stub func(context.Context, string) (string, error)) {
	fake.setupIsolatedFilesystemMutex.Lock()
	defer fake.setupIsolatedFilesystemMutex.Unlock()
	fake.SetupIsolatedFilesystemStub = stub
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystemArgsForCall(i int) (context.Context, string) {
	fake.setupIsolatedFilesystemMutex.RLock()
	defer fake.setupIsolatedFilesystemMutex.RUnlock()
	argsForCall := fake.setupIsolatedFilesystemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystemReturns(result1 string, result2 error) {
	fake.setupIsolatedFilesystemMutex.Lock()
	defer fake.setupIsolatedFilesystemMutex.Unlock()
	fake.SetupIsolatedFilesystemStub = nil
	fake.setupIsolatedFilesystemReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFilesystemManager) SetupIsolatedFilesystemReturnsOnCall(i int, result1 string, result2 error) {
	fake.setupIsolatedFilesystemMutex.Lock()
	defer fake.setupIsolatedFilesystemMutex.Unlock()
	fake.SetupIsolatedFilesystemStub = nil
	if fake.setupIsolatedFilesystemReturnsOnCall == nil {
		fake.setupIsolatedFilesystemReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.setupIsolatedFilesystemReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFilesystemManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupIsolatedFilesystemMutex.RLock()
	defer fake.cleanupIsolatedFilesystemMutex.RUnlock()
	fake.getIsolatedRootMutex.RLock()
	defer fake.getIsolatedRootMutex.RUnlock()
	fake.setupIsolatedFilesystemMutex.RLock()
	defer fake.setupIsolatedFilesystemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilesystemManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.FilesystemManager = new(FakeFilesystemManager)
