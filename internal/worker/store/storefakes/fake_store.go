// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	__ "job-worker/api/gen"
	"job-worker/internal/worker/store"
	"sync"
)

type FakeStore struct {
	GetJobStub        func(string) (*__.Job, bool)
	getJobMutex       sync.RWMutex
	getJobArgsForCall []struct {
		arg1 string
	}
	getJobReturns struct {
		result1 *__.Job
		result2 bool
	}
	getJobReturnsOnCall map[int]struct {
		result1 *__.Job
		result2 bool
	}
	GetJobsStub        func() []*__.Job
	getJobsMutex       sync.RWMutex
	getJobsArgsForCall []struct {
	}
	getJobsReturns struct {
		result1 []*__.Job
	}
	getJobsReturnsOnCall map[int]struct {
		result1 []*__.Job
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) GetJob(arg1 string) (*__.Job, bool) {
	fake.getJobMutex.Lock()
	ret, specificReturn := fake.getJobReturnsOnCall[len(fake.getJobArgsForCall)]
	fake.getJobArgsForCall = append(fake.getJobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetJobStub
	fakeReturns := fake.getJobReturns
	fake.recordInvocation("GetJob", []interface{}{arg1})
	fake.getJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetJobCallCount() int {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return len(fake.getJobArgsForCall)
}

func (fake *FakeStore) GetJobCalls(stub func(string) (*__.Job, bool)) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = stub
}

func (fake *FakeStore) GetJobArgsForCall(i int) string {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	argsForCall := fake.getJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) GetJobReturns(result1 *__.Job, result2 bool) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = nil
	fake.getJobReturns = struct {
		result1 *__.Job
		result2 bool
	}{result1, result2}
}

func (fake *FakeStore) GetJobReturnsOnCall(i int, result1 *__.Job, result2 bool) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = nil
	if fake.getJobReturnsOnCall == nil {
		fake.getJobReturnsOnCall = make(map[int]struct {
			result1 *__.Job
			result2 bool
		})
	}
	fake.getJobReturnsOnCall[i] = struct {
		result1 *__.Job
		result2 bool
	}{result1, result2}
}

func (fake *FakeStore) GetJobs() []*__.Job {
	fake.getJobsMutex.Lock()
	ret, specificReturn := fake.getJobsReturnsOnCall[len(fake.getJobsArgsForCall)]
	fake.getJobsArgsForCall = append(fake.getJobsArgsForCall, struct {
	}{})
	stub := fake.GetJobsStub
	fakeReturns := fake.getJobsReturns
	fake.recordInvocation("GetJobs", []interface{}{})
	fake.getJobsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) GetJobsCallCount() int {
	fake.getJobsMutex.RLock()
	defer fake.getJobsMutex.RUnlock()
	return len(fake.getJobsArgsForCall)
}

func (fake *FakeStore) GetJobsCalls(stub func() []*__.Job) {
	fake.getJobsMutex.Lock()
	defer fake.getJobsMutex.Unlock()
	fake.GetJobsStub = stub
}

func (fake *FakeStore) GetJobsReturns(result1 []*__.Job) {
	fake.getJobsMutex.Lock()
	defer fake.getJobsMutex.Unlock()
	fake.GetJobsStub = nil
	fake.getJobsReturns = struct {
		result1 []*__.Job
	}{result1}
}

func (fake *FakeStore) GetJobsReturnsOnCall(i int, result1 []*__.Job) {
	fake.getJobsMutex.Lock()
	defer fake.getJobsMutex.Unlock()
	fake.GetJobsStub = nil
	if fake.getJobsReturnsOnCall == nil {
		fake.getJobsReturnsOnCall = make(map[int]struct {
			result1 []*__.Job
		})
	}
	fake.getJobsReturnsOnCall[i] = struct {
		result1 []*__.Job
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	fake.getJobsMutex.RLock()
	defer fake.getJobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Store = new(FakeStore)
